// Generated by @wagmi/cli@0.1.5 on 2/6/2023 at 11:33:00 AM
import {
  useContract,
  UseContractConfig, useContractEvent,
  UseContractEventConfig, useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig
} from 'wagmi'
import { PrepareWriteContractResult, WriteContractMode } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DataDaoManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dataDaoManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'timeCreated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'nameOfInstitution',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'addressOfInstitution',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreatedNewInstitution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'cidraw', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'size',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'addedNewCID',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'cidraw', internalType: 'bytes', type: 'bytes' },
      { name: 'size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addCID',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allInstitutions',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'cidraw', internalType: 'bytes', type: 'bytes' },
      { name: 'provider', internalType: 'uint64', type: 'uint64' },
      { name: 'size', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'int64', type: 'int64' },
    ],
    name: 'authorizeData',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'cidraw', internalType: 'bytes', type: 'bytes' },
      { name: 'provider', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'checkProvider',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'int64', type: 'int64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'cidInfo',
    outputs: [
      { name: 'cidSet', internalType: 'bool', type: 'bool' },
      { name: 'cidSizes', internalType: 'uint256', type: 'uint256' },
      { name: 'fromInstitution', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'cidProviders',
    outputs: [
      { name: 'isProvider', internalType: 'bool', type: 'bool' },
      { name: 'lastClaimed', internalType: 'int64', type: 'int64' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'claimBounty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'claimRewardFromBounty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'initialOwners', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'createNewInstitutionDAO',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'createdInstitutions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllInstitutionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getAllInstitutionRegisteredToUser',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getInstitutionRegisteredToCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'registeredInstitutions',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'institution', internalType: 'address', type: 'address' },
    ],
    name: 'setInstitutionRegisteredTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Institution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const institutionABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: 'owners', internalType: 'address[]', type: 'address[]' },
      {
        name: '_managingDao',
        internalType: 'contract IDaoManagerCID',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deal_id',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'claimee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ClaimedBounty',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'allowRegistrant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'allowReviewer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'applyToInstitution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'approveDealIdentifer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'approvedDealIdentifers',
    outputs: [
      { name: 'title', internalType: 'string', type: 'string' },
      { name: 'cid', internalType: 'bytes', type: 'bytes' },
      { name: 'cidSize', internalType: 'uint256', type: 'uint256' },
      { name: 'timeCreated', internalType: 'uint256', type: 'uint256' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'voteCount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'award_bounty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'method', internalType: 'uint64', type: 'uint64' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'flags', internalType: 'uint64', type: 'uint64' },
      { name: 'codec', internalType: 'uint64', type: 'uint64' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'id', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'call_actor_id',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'uint64', type: 'uint64' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'claim_bounty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dealidentiferCount',
    outputs: [{ name: '_value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'docsForApproval',
    outputs: [
      { name: 'title', internalType: 'string', type: 'string' },
      { name: 'cid', internalType: 'bytes', type: 'bytes' },
      { name: 'cidSize', internalType: 'uint256', type: 'uint256' },
      { name: 'timeCreated', internalType: 'uint256', type: 'uint256' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'voteCount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'docsForApprovalCount',
    outputs: [{ name: '_value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'unused', internalType: 'uint64', type: 'uint64' }],
    name: 'fund',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'getDealTerms',
    outputs: [
      { name: '', internalType: 'int64', type: 'int64' },
      { name: '', internalType: 'int64', type: 'int64' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deal_id', internalType: 'uint64', type: 'uint64' }],
    name: 'getDealTotalPrice',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketTypes.GetDealEpochPriceReturn',
        type: 'tuple',
        components: [
          {
            name: 'price_per_epoch',
            internalType: 'struct BigInt',
            type: 'tuple',
            components: [
              { name: 'val', internalType: 'bytes', type: 'bytes' },
              { name: 'neg', internalType: 'bool', type: 'bool' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'role',
        internalType: 'enum IManageInstitutionOnDao.ROLES',
        type: 'uint8',
      },
    ],
    name: 'getRoleNum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      {
        name: 'role',
        internalType: 'enum IManageInstitutionOnDao.ROLES',
        type: 'uint8',
      },
    ],
    name: 'grantAccess',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'joinInstitution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'memberApplicants',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'memberOfDAO',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'string', type: 'string' },
      { name: 'cid', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerNewDealIdentifer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'roleOfAccount',
    outputs: [
      {
        name: '',
        internalType: 'enum IManageInstitutionOnDao.ROLES',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newName', internalType: 'string', type: 'string' }],
    name: 'updateName',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'voteDealIdentifer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'voters',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dataDaoManagerABI}__.
 */
export function useDataDaoManager(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dataDaoManagerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__.
 */
export function useDataDaoManagerRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"allInstitutions"`.
 */
export function useDataDaoManagerAllInstitutions(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'allInstitutions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'allInstitutions',
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, 'allInstitutions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"checkProvider"`.
 */
export function useDataDaoManagerCheckProvider(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'checkProvider'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'checkProvider',
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, 'checkProvider'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"cidInfo"`.
 */
export function useDataDaoManagerCidInfo(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'cidInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'cidInfo',
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, 'cidInfo'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"cidProviders"`.
 */
export function useDataDaoManagerCidProviders(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'cidProviders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'cidProviders',
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, 'cidProviders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"createdInstitutions"`.
 */
export function useDataDaoManagerCreatedInstitutions(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'createdInstitutions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'createdInstitutions',
    ...config,
  } as UseContractReadConfig<typeof dataDaoManagerABI, 'createdInstitutions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"getAllInstitutionCount"`.
 */
export function useDataDaoManagerGetAllInstitutionCount(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'getAllInstitutionCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'getAllInstitutionCount',
    ...config,
  } as UseContractReadConfig<
    typeof dataDaoManagerABI,
    'getAllInstitutionCount'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"getAllInstitutionRegisteredToUser"`.
 */
export function useDataDaoManagerGetAllInstitutionRegisteredToUser(
  config: Omit<
    UseContractReadConfig<
      typeof dataDaoManagerABI,
      'getAllInstitutionRegisteredToUser'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'getAllInstitutionRegisteredToUser',
    ...config,
  } as UseContractReadConfig<
    typeof dataDaoManagerABI,
    'getAllInstitutionRegisteredToUser'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"getInstitutionRegisteredToCount"`.
 */
export function useDataDaoManagerGetInstitutionRegisteredToCount(
  config: Omit<
    UseContractReadConfig<
      typeof dataDaoManagerABI,
      'getInstitutionRegisteredToCount'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'getInstitutionRegisteredToCount',
    ...config,
  } as UseContractReadConfig<
    typeof dataDaoManagerABI,
    'getInstitutionRegisteredToCount'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"registeredInstitutions"`.
 */
export function useDataDaoManagerRegisteredInstitutions(
  config: Omit<
    UseContractReadConfig<typeof dataDaoManagerABI, 'registeredInstitutions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dataDaoManagerABI,
    functionName: 'registeredInstitutions',
    ...config,
  } as UseContractReadConfig<
    typeof dataDaoManagerABI,
    'registeredInstitutions'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__.
 */
export function useDataDaoManagerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dataDaoManagerABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dataDaoManagerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dataDaoManagerABI, TFunctionName>({
    abi: dataDaoManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"addCID"`.
 */
export function useDataDaoManagerAddCid<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dataDaoManagerABI, 'addCID'>['abi'],
        'addCID'
      > & { functionName?: 'addCID' }
    : UseContractWriteConfig<TMode, typeof dataDaoManagerABI, 'addCID'> & {
        abi?: never
        functionName?: 'addCID'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dataDaoManagerABI, 'addCID'>({
    abi: dataDaoManagerABI,
    functionName: 'addCID',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"authorizeData"`.
 */
export function useDataDaoManagerAuthorizeData<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dataDaoManagerABI,
          'authorizeData'
        >['abi'],
        'authorizeData'
      > & { functionName?: 'authorizeData' }
    : UseContractWriteConfig<
        TMode,
        typeof dataDaoManagerABI,
        'authorizeData'
      > & {
        abi?: never
        functionName?: 'authorizeData'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dataDaoManagerABI, 'authorizeData'>({
    abi: dataDaoManagerABI,
    functionName: 'authorizeData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"claimBounty"`.
 */
export function useDataDaoManagerClaimBounty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dataDaoManagerABI,
          'claimBounty'
        >['abi'],
        'claimBounty'
      > & { functionName?: 'claimBounty' }
    : UseContractWriteConfig<TMode, typeof dataDaoManagerABI, 'claimBounty'> & {
        abi?: never
        functionName?: 'claimBounty'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dataDaoManagerABI, 'claimBounty'>({
    abi: dataDaoManagerABI,
    functionName: 'claimBounty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"claimRewardFromBounty"`.
 */
export function useDataDaoManagerClaimRewardFromBounty<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dataDaoManagerABI,
          'claimRewardFromBounty'
        >['abi'],
        'claimRewardFromBounty'
      > & { functionName?: 'claimRewardFromBounty' }
    : UseContractWriteConfig<
        TMode,
        typeof dataDaoManagerABI,
        'claimRewardFromBounty'
      > & {
        abi?: never
        functionName?: 'claimRewardFromBounty'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dataDaoManagerABI,
    'claimRewardFromBounty'
  >({
    abi: dataDaoManagerABI,
    functionName: 'claimRewardFromBounty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"createNewInstitutionDAO"`.
 */
export function useDataDaoManagerCreateNewInstitutionDao<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dataDaoManagerABI,
          'createNewInstitutionDAO'
        >['abi'],
        'createNewInstitutionDAO'
      > & { functionName?: 'createNewInstitutionDAO' }
    : UseContractWriteConfig<
        TMode,
        typeof dataDaoManagerABI,
        'createNewInstitutionDAO'
      > & {
        abi?: never
        functionName?: 'createNewInstitutionDAO'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dataDaoManagerABI,
    'createNewInstitutionDAO'
  >({
    abi: dataDaoManagerABI,
    functionName: 'createNewInstitutionDAO',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"setInstitutionRegisteredTo"`.
 */
export function useDataDaoManagerSetInstitutionRegisteredTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dataDaoManagerABI,
          'setInstitutionRegisteredTo'
        >['abi'],
        'setInstitutionRegisteredTo'
      > & { functionName?: 'setInstitutionRegisteredTo' }
    : UseContractWriteConfig<
        TMode,
        typeof dataDaoManagerABI,
        'setInstitutionRegisteredTo'
      > & {
        abi?: never
        functionName?: 'setInstitutionRegisteredTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dataDaoManagerABI,
    'setInstitutionRegisteredTo'
  >({
    abi: dataDaoManagerABI,
    functionName: 'setInstitutionRegisteredTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__.
 */
export function usePrepareDataDaoManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dataDaoManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dataDaoManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"addCID"`.
 */
export function usePrepareDataDaoManagerAddCid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'addCID'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'addCID',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'addCID'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"authorizeData"`.
 */
export function usePrepareDataDaoManagerAuthorizeData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'authorizeData'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'authorizeData',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'authorizeData'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"claimBounty"`.
 */
export function usePrepareDataDaoManagerClaimBounty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'claimBounty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'claimBounty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dataDaoManagerABI, 'claimBounty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"claimRewardFromBounty"`.
 */
export function usePrepareDataDaoManagerClaimRewardFromBounty(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dataDaoManagerABI,
      'claimRewardFromBounty'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'claimRewardFromBounty',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dataDaoManagerABI,
    'claimRewardFromBounty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"createNewInstitutionDAO"`.
 */
export function usePrepareDataDaoManagerCreateNewInstitutionDao(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dataDaoManagerABI,
      'createNewInstitutionDAO'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'createNewInstitutionDAO',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dataDaoManagerABI,
    'createNewInstitutionDAO'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dataDaoManagerABI}__ and `functionName` set to `"setInstitutionRegisteredTo"`.
 */
export function usePrepareDataDaoManagerSetInstitutionRegisteredTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dataDaoManagerABI,
      'setInstitutionRegisteredTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dataDaoManagerABI,
    functionName: 'setInstitutionRegisteredTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dataDaoManagerABI,
    'setInstitutionRegisteredTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dataDaoManagerABI}__.
 */
export function useDataDaoManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dataDaoManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dataDaoManagerABI,
    ...config,
  } as UseContractEventConfig<typeof dataDaoManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dataDaoManagerABI}__ and `eventName` set to `"CreatedNewInstitution"`.
 */
export function useDataDaoManagerCreatedNewInstitutionEvent(
  config: Omit<
    UseContractEventConfig<typeof dataDaoManagerABI, 'CreatedNewInstitution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dataDaoManagerABI,
    eventName: 'CreatedNewInstitution',
    ...config,
  } as UseContractEventConfig<
    typeof dataDaoManagerABI,
    'CreatedNewInstitution'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dataDaoManagerABI}__ and `eventName` set to `"addedNewCID"`.
 */
export function useDataDaoManagerAddedNewCidEvent(
  config: Omit<
    UseContractEventConfig<typeof dataDaoManagerABI, 'addedNewCID'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dataDaoManagerABI,
    eventName: 'addedNewCID',
    ...config,
  } as UseContractEventConfig<typeof dataDaoManagerABI, 'addedNewCID'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link institutionABI}__.
 */
export function useInstitution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: institutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__.
 */
export function useInstitutionRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    ...config,
  } as UseContractReadConfig<typeof institutionABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"approvedDealIdentifers"`.
 */
export function useInstitutionApprovedDealIdentifers(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'approvedDealIdentifers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'approvedDealIdentifers',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'approvedDealIdentifers'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"dealidentiferCount"`.
 */
export function useInstitutionDealidentiferCount(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'dealidentiferCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'dealidentiferCount',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'dealidentiferCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"docsForApproval"`.
 */
export function useInstitutionDocsForApproval(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'docsForApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'docsForApproval',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'docsForApproval'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"docsForApprovalCount"`.
 */
export function useInstitutionDocsForApprovalCount(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'docsForApprovalCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'docsForApprovalCount',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'docsForApprovalCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getAllMemberCount"`.
 */
export function useInstitutionGetAllMemberCount(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'getAllMemberCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'getAllMemberCount',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'getAllMemberCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getRoleNum"`.
 */
export function useInstitutionGetRoleNum(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'getRoleNum'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'getRoleNum',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'getRoleNum'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"memberApplicants"`.
 */
export function useInstitutionMemberApplicants(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'memberApplicants'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'memberApplicants',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'memberApplicants'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"memberOfDAO"`.
 */
export function useInstitutionMemberOfDao(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'memberOfDAO'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'memberOfDAO',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'memberOfDAO'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"name"`.
 */
export function useInstitutionName(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"roleOfAccount"`.
 */
export function useInstitutionRoleOfAccount(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'roleOfAccount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'roleOfAccount',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'roleOfAccount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"voters"`.
 */
export function useInstitutionVoters(
  config: Omit<
    UseContractReadConfig<typeof institutionABI, 'voters'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: institutionABI,
    functionName: 'voters',
    ...config,
  } as UseContractReadConfig<typeof institutionABI, 'voters'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__.
 */
export function useInstitutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof institutionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof institutionABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, TFunctionName>({
    abi: institutionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"allowRegistrant"`.
 */
export function useInstitutionAllowRegistrant<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'allowRegistrant'
        >['abi'],
        'allowRegistrant'
      > & { functionName?: 'allowRegistrant' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'allowRegistrant'
      > & {
        abi?: never
        functionName?: 'allowRegistrant'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'allowRegistrant'>({
    abi: institutionABI,
    functionName: 'allowRegistrant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"allowReviewer"`.
 */
export function useInstitutionAllowReviewer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'allowReviewer'
        >['abi'],
        'allowReviewer'
      > & { functionName?: 'allowReviewer' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'allowReviewer'> & {
        abi?: never
        functionName?: 'allowReviewer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'allowReviewer'>({
    abi: institutionABI,
    functionName: 'allowReviewer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"applyToInstitution"`.
 */
export function useInstitutionApplyToInstitution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'applyToInstitution'
        >['abi'],
        'applyToInstitution'
      > & { functionName?: 'applyToInstitution' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'applyToInstitution'
      > & {
        abi?: never
        functionName?: 'applyToInstitution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'applyToInstitution'>({
    abi: institutionABI,
    functionName: 'applyToInstitution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"approveDealIdentifer"`.
 */
export function useInstitutionApproveDealIdentifer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'approveDealIdentifer'
        >['abi'],
        'approveDealIdentifer'
      > & { functionName?: 'approveDealIdentifer' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'approveDealIdentifer'
      > & {
        abi?: never
        functionName?: 'approveDealIdentifer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'approveDealIdentifer'>(
    {
      abi: institutionABI,
      functionName: 'approveDealIdentifer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"award_bounty"`.
 */
export function useInstitutionAwardBounty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'award_bounty'
        >['abi'],
        'award_bounty'
      > & { functionName?: 'award_bounty' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'award_bounty'> & {
        abi?: never
        functionName?: 'award_bounty'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'award_bounty'>({
    abi: institutionABI,
    functionName: 'award_bounty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"call_actor_id"`.
 */
export function useInstitutionCallActorId<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'call_actor_id'
        >['abi'],
        'call_actor_id'
      > & { functionName?: 'call_actor_id' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'call_actor_id'> & {
        abi?: never
        functionName?: 'call_actor_id'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'call_actor_id'>({
    abi: institutionABI,
    functionName: 'call_actor_id',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"claim_bounty"`.
 */
export function useInstitutionClaimBounty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'claim_bounty'
        >['abi'],
        'claim_bounty'
      > & { functionName?: 'claim_bounty' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'claim_bounty'> & {
        abi?: never
        functionName?: 'claim_bounty'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'claim_bounty'>({
    abi: institutionABI,
    functionName: 'claim_bounty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"fund"`.
 */
export function useInstitutionFund<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof institutionABI, 'fund'>['abi'],
        'fund'
      > & { functionName?: 'fund' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'fund'> & {
        abi?: never
        functionName?: 'fund'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'fund'>({
    abi: institutionABI,
    functionName: 'fund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getDealTerms"`.
 */
export function useInstitutionGetDealTerms<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'getDealTerms'
        >['abi'],
        'getDealTerms'
      > & { functionName?: 'getDealTerms' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'getDealTerms'> & {
        abi?: never
        functionName?: 'getDealTerms'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'getDealTerms'>({
    abi: institutionABI,
    functionName: 'getDealTerms',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getDealTotalPrice"`.
 */
export function useInstitutionGetDealTotalPrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'getDealTotalPrice'
        >['abi'],
        'getDealTotalPrice'
      > & { functionName?: 'getDealTotalPrice' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'getDealTotalPrice'
      > & {
        abi?: never
        functionName?: 'getDealTotalPrice'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'getDealTotalPrice'>({
    abi: institutionABI,
    functionName: 'getDealTotalPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"grantAccess"`.
 */
export function useInstitutionGrantAccess<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof institutionABI, 'grantAccess'>['abi'],
        'grantAccess'
      > & { functionName?: 'grantAccess' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'grantAccess'> & {
        abi?: never
        functionName?: 'grantAccess'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'grantAccess'>({
    abi: institutionABI,
    functionName: 'grantAccess',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"joinInstitution"`.
 */
export function useInstitutionJoinInstitution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'joinInstitution'
        >['abi'],
        'joinInstitution'
      > & { functionName?: 'joinInstitution' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'joinInstitution'
      > & {
        abi?: never
        functionName?: 'joinInstitution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'joinInstitution'>({
    abi: institutionABI,
    functionName: 'joinInstitution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"registerNewDealIdentifer"`.
 */
export function useInstitutionRegisterNewDealIdentifer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'registerNewDealIdentifer'
        >['abi'],
        'registerNewDealIdentifer'
      > & { functionName?: 'registerNewDealIdentifer' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'registerNewDealIdentifer'
      > & {
        abi?: never
        functionName?: 'registerNewDealIdentifer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof institutionABI,
    'registerNewDealIdentifer'
  >({
    abi: institutionABI,
    functionName: 'registerNewDealIdentifer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"updateName"`.
 */
export function useInstitutionUpdateName<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof institutionABI, 'updateName'>['abi'],
        'updateName'
      > & { functionName?: 'updateName' }
    : UseContractWriteConfig<TMode, typeof institutionABI, 'updateName'> & {
        abi?: never
        functionName?: 'updateName'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'updateName'>({
    abi: institutionABI,
    functionName: 'updateName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"voteDealIdentifer"`.
 */
export function useInstitutionVoteDealIdentifer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof institutionABI,
          'voteDealIdentifer'
        >['abi'],
        'voteDealIdentifer'
      > & { functionName?: 'voteDealIdentifer' }
    : UseContractWriteConfig<
        TMode,
        typeof institutionABI,
        'voteDealIdentifer'
      > & {
        abi?: never
        functionName?: 'voteDealIdentifer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof institutionABI, 'voteDealIdentifer'>({
    abi: institutionABI,
    functionName: 'voteDealIdentifer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__.
 */
export function usePrepareInstitutionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"allowRegistrant"`.
 */
export function usePrepareInstitutionAllowRegistrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'allowRegistrant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'allowRegistrant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'allowRegistrant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"allowReviewer"`.
 */
export function usePrepareInstitutionAllowReviewer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'allowReviewer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'allowReviewer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'allowReviewer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"applyToInstitution"`.
 */
export function usePrepareInstitutionApplyToInstitution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'applyToInstitution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'applyToInstitution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof institutionABI,
    'applyToInstitution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"approveDealIdentifer"`.
 */
export function usePrepareInstitutionApproveDealIdentifer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof institutionABI,
      'approveDealIdentifer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'approveDealIdentifer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof institutionABI,
    'approveDealIdentifer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"award_bounty"`.
 */
export function usePrepareInstitutionAwardBounty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'award_bounty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'award_bounty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'award_bounty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"call_actor_id"`.
 */
export function usePrepareInstitutionCallActorId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'call_actor_id'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'call_actor_id',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'call_actor_id'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"claim_bounty"`.
 */
export function usePrepareInstitutionClaimBounty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'claim_bounty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'claim_bounty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'claim_bounty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"fund"`.
 */
export function usePrepareInstitutionFund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'fund'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'fund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'fund'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getDealTerms"`.
 */
export function usePrepareInstitutionGetDealTerms(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'getDealTerms'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'getDealTerms',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'getDealTerms'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"getDealTotalPrice"`.
 */
export function usePrepareInstitutionGetDealTotalPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'getDealTotalPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'getDealTotalPrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof institutionABI,
    'getDealTotalPrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"grantAccess"`.
 */
export function usePrepareInstitutionGrantAccess(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'grantAccess'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'grantAccess',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'grantAccess'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"joinInstitution"`.
 */
export function usePrepareInstitutionJoinInstitution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'joinInstitution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'joinInstitution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'joinInstitution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"registerNewDealIdentifer"`.
 */
export function usePrepareInstitutionRegisterNewDealIdentifer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof institutionABI,
      'registerNewDealIdentifer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'registerNewDealIdentifer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof institutionABI,
    'registerNewDealIdentifer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"updateName"`.
 */
export function usePrepareInstitutionUpdateName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'updateName'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'updateName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof institutionABI, 'updateName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link institutionABI}__ and `functionName` set to `"voteDealIdentifer"`.
 */
export function usePrepareInstitutionVoteDealIdentifer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof institutionABI, 'voteDealIdentifer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: institutionABI,
    functionName: 'voteDealIdentifer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof institutionABI,
    'voteDealIdentifer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link institutionABI}__.
 */
export function useInstitutionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof institutionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: institutionABI,
    ...config,
  } as UseContractEventConfig<typeof institutionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link institutionABI}__ and `eventName` set to `"ClaimedBounty"`.
 */
export function useInstitutionClaimedBountyEvent(
  config: Omit<
    UseContractEventConfig<typeof institutionABI, 'ClaimedBounty'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: institutionABI,
    eventName: 'ClaimedBounty',
    ...config,
  } as UseContractEventConfig<typeof institutionABI, 'ClaimedBounty'>)
}
